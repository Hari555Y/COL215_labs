library IEEE; -- importing required library
use IEEE.std_logic_1164.all; 
use IEEE.numeric_std.all;   
use IEEE.std_logic_unsigned.all; 



entity Memory is    -- Memory entity defined here

    Port (clk : in  STD_LOGIC;  -- FPGA clock of 10ns time period
         -- Is_Queue_empty : out  STD_LOGIC;  -- LED which show whether Queue empty or not
      --    Is_Queue_full : out  STD_LOGIC;  --LED whcich indicate Queue is full or not
          read_enable : in  STD_LOGIC;  -- push Button for Reading data from Queue
          write_enable : in  STD_LOGIC;  -- push Button for Writing data into Queue
          tx_data : out STD_LOGIC_VECTOR( 7 downto 0);  -- transfer data
          tx_en: out STD_LOGIC;  -- trasnmission_emission
          check_tx_en : in std_logic;  -- transmission check
	      Output_LED : out STD_LOGIC_VECTOR ( 6 downto 0); -- Cathode for 7 seg display
	      Anode_Activate : out STD_LOGIC_VECTOR ( 3 downto 0); -- common anode for 7 seg
	      Input_data : in  STD_LOGIC_VECTOR (7 downto 0)); -- Input data given from Switch
end Memory;

architecture Behavioral of Memory is-- Memory Architectural bheviour starts from here

  component BRAM is
  port (
    BRAM_PORTA_addr : in STD_LOGIC_VECTOR ( 16 downto 0 ); -- indicate address vector of BRAM ( whose size '8' tell tha depth of BRAM which is 8 here)
    BRAM_PORTA_clk : in STD_LOGIC;  -- BRAM clk
    BRAM_PORTA_din : in STD_LOGIC_VECTOR ( 7 downto 0 );  --BRAM input
    BRAM_PORTA_dout : out STD_LOGIC_VECTOR ( 7 downto 0 );  -- BRAM ouput 
    BRAM_PORTA_en : in STD_LOGIC;  -- bRAM enable logic
    BRAM_PORTA_we : in STD_LOGIC_VECTOR ( 0 to 0 )  -- BRAM write enable vector
  );
  end component BRAM;


 
--signal Q_full : std_logic := '0'; -- variabel which  have current info regarding Queue full or not
--signal Q_empty : std_logic :='1'; -- variable which have current info whether Queue empty or not 

signal W_pointer : std_logic_vector(16 downto 0) := (others => '0');  -- Write pointer of circular Queue
signal R_pointer : std_logic_vector(16 downto 0):= (others => '0'); -- Read pointer of circular Queue 

signal n0,n1,n2,n3,p0,p1,p2,p3 : STD_LOGIC ; -- defining some signals which we are going to use afterwards
signal which_led : STD_LOGIC_VECTOR (3 downto 0) := (others => '0');   -- another vector

signal Read_data : STD_LOGIC_VECTOR (7 downto 0) := "00000000"; -- Used to store data read from  BRAM  

signal cnt : integer range 0 to 40001:= 0;  -- integer variable used for LED display
signal count : integer range 0 to 1000005:=0;    -- integer used for Debouncing of push button
signal count1 : integer range 0 to 2:= 0;   -- used for Write/push operation 
signal count2: integer range 0 to 2 :=0;     -- used for Read/pop operation
signal cnt1 : integer range 0 to 3 :=0;
signal cnt2: integer range 0 to 3 :=0;
signal en : std_logic :='0';        -- use to enable/disable BRAM
signal we: std_logic_vector(0 to 0) :="0";  -- use to Write enable BRAM
signal BRAM_addr : std_logic_vector (16 downto 0):= (others => '0');  -- used to assging address to BRAM
signal temp_w : std_logic_vector(7 downto 0):= "00000000";  -- tempvariable 
signal temp_R : std_logic_vector(15 downto 0) := (others => '0');
signal Trx_data : std_logic_vector(7 downto 0) :=(others =>'0');
signal new_clk: std_logic :='0';  -- clock used for Push/Pop operation
signal prevW: std_logic :='0';  -- variable used to avoid multiple push operaiton
signal prevR : std_logic := '0';  -- variable used to avoid multiple pop operation
signal temp_en :std_logic:='0';
signal tempR_enable :std_logic :='0';
signal c : std_logic:='0';
signal idx : integer :=0;
signal idx1: integer :=0;
signal cnt3 : integer :=0;
signal new_idx : integer :=0;
type Store is array (0 to 1000) of std_logic_vector(7 downto 0);
signal Ar : Store;



begin

A : BRAM port Map(BRAM_PORTA_addr => BRAM_addr  ,BRAM_PORTA_clk => clk , BRAM_PORTA_din =>temp_w, BRAM_PORTA_dout=>Read_data,BRAM_PORTA_en =>en ,BRAM_PORTA_we=>we);  -- port mapping of Fifo Port to BRAM Port 


seven_seg_display : process(which_led)   -- logic for 7 segment led display using Boolean expression


begin


	n0 <= NOT which_led(0);  -- giving values to some of defined signals using which_led vector
	n1 <= NOT which_led(1);
	n2 <= NOT which_led(2);
	n3 <= NOT which_led(3);

	p0 <=  which_led(0);
	p1 <=  which_led(1);
	p2 <=  which_led(2);
	p3 <=  which_led(3);



    ---- logic for all of the 7 leds defined using karnaugh map on the above signals

    Output_LED(0) <=   (n2 AND p3  AND p0 AND p1 ) OR (n3 AND n2 AND n1 AND p0) OR  (p3 AND p2 AND n1 AND p0) OR  (n3 AND p2 AND n1 AND n0);
      
    Output_LED(1) <=   (p0 AND p1 AND p3) OR (p2 AND p1 AND n0)  OR (p2 AND p3 AND n0 AND n1) OR (n3 AND p2 AND n1 AND p0); 
    
    Output_LED(2) <=  (p1 AND p2 AND p3) OR (n2 AND n3 AND p1 AND n0) OR (p2 AND p3 AND n0);
    
    Output_LED(3) <=  (n3 AND p2 AND n1 AND n0) OR (n1 AND n2 AND n3 AND p0) OR  (p3 AND n2 AND p1 AND n0) OR  (p0 AND  p1 AND p2);
                      
    Output_LED(4) <= (n1 AND p2 AND n3) OR (n2 AND n1 AND p0) OR (p0 AND n3);
    
    Output_LED(5) <= (n2 AND n3 AND p0) OR  (n2 AND n3 AND p1)  OR (p3 AND p2 AND n1 AND p0) OR (n3 AND p1 AND p0);
    
    Output_LED(6) <= (n1 AND n2 AND n3) OR (p2 AND p3 AND n1 AND n0) OR (n3 AND p0 AND p1 AND p2);
    
          
end process;

debouncing_and_LED_display : process(clk) -- debouncing condition is implemented here 
begin
    if rising_edge(clk) then  
    
	    if(count = 1000000) then   -- debounding logic (basically creating new clock of 100HZ
	          new_clk <= not new_clk;
	          count<=0;
	    else 
	       count <=count+1;          -- counter use for generating clock of frequency 100Hz
	    end if;
	    
	    cnt <= cnt +1;                -- this counter use to turn on 7 seg leds

	    if(write_enable='0' and cnt3=0) then Ar(idx) <= Input_data;cnt3 <=1;idx <=idx+1;
	    end if;
	    if(write_enable='1') then cnt3<=0;
	    end if;

	   
      if((cnt mod 4000 ) < 1000) then   --receiver data display
        Anode_Activate <= "1011";
        which_led(0) <= temp_R(0);
        which_led(1) <= temp_R(1);
        which_led(2) <= temp_R(2);
        which_led (3) <= temp_R(3);
      
      elsif((cnt mod 4000) < 2000 ) then 
        Anode_Activate <= "0111";
        which_led(0) <= temp_R(4);
        which_led(1) <= temp_R(5);
        which_led(2) <= temp_R(6);
        which_led (3) <= temp_R(7);
        
      elsif((cnt mod 4000) < 3000 ) then  --tranmist data display
        Anode_Activate <= "1110";
        which_led(0) <= Trx_data(0);
        which_led(1) <= Trx_data(1);
        which_led(2) <= Trx_data(2);
        which_led (3) <= Trx_data(3);
     elsif((cnt mod 4000) < 4000 ) then 
        Anode_Activate <= "1101";
        which_led(0) <= Trx_data(4);
        which_led(1) <= Trx_data(5);
        which_led(2) <= Trx_data(6);
        which_led (3) <= Trx_data(7);
      else Anode_Activate <="1111";
      
      end if;
                   
  end if;

	  
end process;


Fifo_operation : process(new_clk)  -- process for Queue Write and Read operation
begin

  if(rising_edge(new_clk)) then -- doing operation of "push" and "pop"" in queue at rising edge of new_clk
     



     
         if(read_enable='1') then tempR_enable <='1';  -- reading condition check 
         end if;
         
         if(read_enable='0' and c='1') then  -- logic for avoding multiple read in one press of pushButton
           prevR <='0';
           tempR_enable <='1';
         end if;
         
         if(count1=1) then      -- waiting for 3 clock cycle for Write operation
           cnt1 <= cnt1+1;
         end if;
         
         if(count2=1) then      -- waiting for 3 clock cycle for Read operation
           cnt2 <=cnt2+1;
           tx_en <='0';
          end if;
          
          
          if(cnt1=2) then      -- complete Write operation 
              temp_R ( 15 downto 8)<=temp_w;
              count1 <=0;
              cnt1<=0;
              prevW <='0';
              we <="0";
              en <='0';  -- Disabling BRAM
              
          end if;
             
         
         if(cnt2=2) then     -- Start Read operation
             
             tx_data <=Read_data;
             Trx_data <=Read_data;
             R_pointer <= R_pointer+'1';         -- incrementing Read pointer 
             tx_en <='1';
             
             count2 <=0;
             cnt2<=0;
             en <='0';  --Disabling BRAM
    
         end if;
             
             
    --     if    idx1<(idx-1) and not Q_full = '1' and prevW='0' then  --Write operation
         if    idx1<(idx-1)  and prevW='0' then  --Write operation    
              en <='1';  -- Enabling BRAM
              we<= "1";
              prevW <='1';
              count1 <=1;
              temp_en <='0';
              
              BRAM_addr <= W_pointer; -- assiging address to BRAM where write operation to be perfromed
              
              temp_w <=Ar(idx1);   -- storting data to BRAM
          
              temp_R( 7 downto 0) <=Ar(idx1);  -- storing data and displaying on FPGA board
              idx1<=idx1+1;
              
              
              W_pointer <=  W_pointer+'1'; -- incrementing Write pointer by 1 as one element get  pushed into it
             
          
    --     elsif (tempR_enable='1' and not Q_empty = '1' and prevR='0') then --Read operaiton initiation
         elsif (tempR_enable='1'  and prevR='0') then --Read operaiton initiation
             c <='1';
             en <='1'; -- Enabling BRAM
             prevR <='1';
             count2<=1;
             new_idx <=new_idx+1;
             BRAM_addr <= R_pointer;  -- Asssinging reading address to BRAM address
                
         end if;
         

  end if;
end process;

end Behavioral;